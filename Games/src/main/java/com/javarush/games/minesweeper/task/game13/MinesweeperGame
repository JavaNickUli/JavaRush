package com.javarush.games.minesweeper;

import com.javarush.engine.cell.Color;
import com.javarush.engine.cell.Game;

import java.util.ArrayList;
import java.util.List;

public class MinesweeperGame extends Game {

    private static final int SIDE = 9;
    private static final String MINE = "\uD83D\uDCA3";
    private static final String FLAG = "\uD83D\uDEA9";
    private GameObject[][] gameField = new GameObject[SIDE][SIDE];
    private int countMinesOnField;
    private int countFlags;
    private boolean isGameStopped;

    @Override
    public void initialize() {
        setScreenSize(SIDE, SIDE);
        createGame();
    }

    @Override
    public void onMouseLeftClick(int x, int y) {
        openTile(x, y);
    }

    @Override
    public void onMouseRightClick(int x, int y) {
        markTile(x, y);
    }

    private void createGame() {
        isGameStopped = false;
        for (int y = 0; y < SIDE; y++) {
            for (int x = 0; x < SIDE; x++) {
                boolean isMine = getRandomNumber(10) < 1;
                if (isMine) {
                    countMinesOnField++;
                }
                gameField[y][x] = new GameObject(x, y, isMine);
                setCellColor(x, y, Color.ORANGE);
            }
        }
        countMineNeighbors();
        countFlags = countMinesOnField;
    }

    private void countMineNeighbors() {
        for (int i = 0; i < gameField.length; i++) {
            for (int j = 0; j < gameField.length; j++) {
                if (gameField[i][j].isMine) continue;
                int countMines = 0;
                for (GameObject cell : getNeighbors(gameField[i][j])) {
                    if (cell.isMine) {
                        countMines++;
                    }
                }
                gameField[i][j].countMineNeighbors = countMines;
            }
        }
    }

    private List<GameObject> getNeighbors(GameObject gameObject) {
        List<GameObject> result = new ArrayList<>();
        for (int y = gameObject.y - 1; y <= gameObject.y + 1; y++) {
            for (int x = gameObject.x - 1; x <= gameObject.x + 1; x++) {
                if (y < 0 || y >= SIDE) {
                    continue;
                }
                if (x < 0 || x >= SIDE) {
                    continue;
                }
                if (gameField[y][x] == gameObject) {
                    continue;
                }
                result.add(gameField[y][x]);
            }
        }
        return result;
    }

    private void openTile(int x, int y) {
        GameObject cell = gameField[y][x];
        if (isGameStopped || cell.isOpen || cell.isFlag) return;
        cell.isOpen = true;
        setCellColor(x, y, Color.GREEN);
        if (cell.isMine) {
            setCellValueEx(x, y, Color.RED, MINE);
            gameOver();
        } else if (cell.countMineNeighbors != 0) {
            setCellNumber(x, y, cell.countMineNeighbors);
        } else {
            setCellValue(x, y, "");
            for (GameObject neighbor : getNeighbors(cell)) {
                if (neighbor.isOpen) continue;
                openTile(neighbor.x, neighbor.y);
            }
        }
    }

    private void markTile(int x, int y) {
        GameObject cell = gameField[y][x];
        if (isGameStopped || cell.isOpen || countFlags == 0 && !cell.isFlag) return;
        if (cell.isFlag) {
            cell.isFlag = false;
            countFlags++;
            setCellValue(x, y, "");
            setCellColor(x, y, Color.ORANGE);
        } else {
            cell.isFlag = true;
            countFlags--;
            setCellValue(x, y, FLAG);
            setCellColor(x, y, Color.YELLOW);
        }
    }

    private void gameOver() {
        isGameStopped = true;
        showMessageDialog(Color.RED, "Game Over!", Color.BLACK, 15);
    }
}
